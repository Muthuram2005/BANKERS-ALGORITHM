#include <stdio.h>

int curr[5][5], maxclaim[5][5], avl[5]; 
int alloc[5] = {0, 0, 0, 0, 0}; 
int maxres[5], running[5]; 
int count = 0, i, j, exec, r, p; 

int main() { 
    printf("Enter the number of processes: "); 
    scanf("%d", &p); 

    for (i = 0; i < p; i++) { 
        running[i] = 1; 
        count++; 
    } 

    printf("Enter the number of resources: "); 
    scanf("%d", &r); 

    // Input maximum resources
    for (i = 0; i < r; i++) { 
        printf("Enter the maximum instances for resource %d: ", i + 1); 
        scanf("%d", &maxres[i]); 
    } 

    // Input maximum claim table
    printf("\nEnter maximum claim table:\n"); 
    for (i = 0; i < p; i++) { 
        printf("For process %d: ", i + 1);
        for (j = 0; j < r; j++) { 
            scanf("%d", &maxclaim[i][j]); 
        } 
    } 

    // Input current allocation table
    printf("\nEnter allocated resource table:\n"); 
    for (i = 0; i < p; i++) { 
        printf("For process %d: ", i + 1);
        for (j = 0; j < r; j++) { 
            scanf("%d", &curr[i][j]); 
        } 
    } 

    // Display maximum resources
    printf("\nMaximum resources:\n"); 
    for (i = 0; i < r; i++) { 
        printf("%d ", maxres[i]); 
    } 
    printf("\n");

    // Display allocated resources
    printf("\nAllocated resource table:\n"); 
    for (i = 0; i < p; i++) { 
        for (j = 0; j < r; j++) { 
            printf("%d ", curr[i][j]); 
        } 
        printf("\n"); 
    } 

    // Display maximum claim table
    printf("\nMaximum claim table:\n"); 
    for (i = 0; i < p; i++) { 
        for (j = 0; j < r; j++) { 
            printf("%d ", maxclaim[i][j]); 
        } 
        printf("\n"); 
    } 

    // Calculate allocated resources
    for (i = 0; i < p; i++) { 
        for (j = 0; j < r; j++) { 
            alloc[j] += curr[i][j]; 
        } 
    } 

    printf("\nTotal allocated resources:\n"); 
    for (i = 0; i < r; i++) { 
        printf("%d ", alloc[i]); 
    } 
    printf("\n");

    // Calculate available resources
    for (i = 0; i < r; i++) { 
        avl[i] = maxres[i] - alloc[i]; 
    } 

    printf("\nAvailable resources:\n"); 
    for (i = 0; i < r; i++) { 
        printf("%d ", avl[i]); 
    } 
    printf("\n");

    // Banker's Algorithm Main Loop
    while (count != 0) { 
        int safe = 0; 
        for (i = 0; i < p; i++) { 
            if (running[i]) { 
                exec = 1; 
                for (j = 0; j < r; j++) { 
                    if (maxclaim[i][j] - curr[i][j] > avl[j]) { 
                        exec = 0; 
                        break; 
                    } 
                } 

                if (exec) { 
                    printf("\nProcess %d is executing.\n", i + 1); 
                    running[i] = 0; 
                    count--; 
                    safe = 1; 

                    for (j = 0; j < r; j++) { 
                        avl[j] += curr[i][j]; 
                    } 

                    printf("Available resources after process %d execution:\n", i + 1);
                    for (j = 0; j < r; j++) {
                        printf("%d ", avl[j]);
                    }
                    printf("\n");
                } 
            } 
        } 

        if (!safe) { 
            printf("\nThe system is in an unsafe state.\n"); 
            break; 
        } 
    } 

    if (count == 0) {
        printf("\nThe system is in a safe state.\n");
    }

    return 0; 
}
